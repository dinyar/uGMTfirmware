-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_energy_deserialization is

  constant IPBUS_SEL_WIDTH: positive := 5; -- Should be enough for now?
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_energy_deserialization(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Thu Jun  4 15:37:26 2015 
  constant N_SLV_ENERGY_QUAD0: integer := 0;
  constant N_SLV_ENERGY_QUAD1: integer := 1;
  constant N_SLV_ENERGY_QUAD2: integer := 2;
  constant N_SLV_ENERGY_QUAD3: integer := 3;
  constant N_SLV_ENERGY_QUAD4: integer := 4;
  constant N_SLV_ENERGY_QUAD5: integer := 5;
  constant N_SLV_ENERGY_QUAD6: integer := 6;
  constant N_SLAVES: integer := 7;
-- END automatically generated VHDL

    
end ipbus_decode_energy_deserialization;

package body ipbus_decode_energy_deserialization is

  function ipbus_sel_energy_deserialization(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Thu Jun  4 15:37:26 2015 
    if    std_match(addr, "-------------000----------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ENERGY_QUAD0, IPBUS_SEL_WIDTH)); -- energy_quad0 / base 0x00000000 / mask 0x00070000
    elsif std_match(addr, "-------------001----------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ENERGY_QUAD1, IPBUS_SEL_WIDTH)); -- energy_quad1 / base 0x00010000 / mask 0x00070000
    elsif std_match(addr, "-------------010----------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ENERGY_QUAD2, IPBUS_SEL_WIDTH)); -- energy_quad2 / base 0x00020000 / mask 0x00070000
    elsif std_match(addr, "-------------011----------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ENERGY_QUAD3, IPBUS_SEL_WIDTH)); -- energy_quad3 / base 0x00030000 / mask 0x00070000
    elsif std_match(addr, "-------------100----------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ENERGY_QUAD4, IPBUS_SEL_WIDTH)); -- energy_quad4 / base 0x00040000 / mask 0x00070000
    elsif std_match(addr, "-------------101----------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ENERGY_QUAD5, IPBUS_SEL_WIDTH)); -- energy_quad5 / base 0x00050000 / mask 0x00070000
    elsif std_match(addr, "-------------110----------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ENERGY_QUAD6, IPBUS_SEL_WIDTH)); -- energy_quad6 / base 0x00060000 / mask 0x00070000
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_energy_deserialization;

end ipbus_decode_energy_deserialization;

